# -*- coding: utf-8 -*-
"""test_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v0AC--Gf7ttqs7BT33TgStCySWNGLB76
"""

import cv2
import os
import keras

print("shiva")



from google.colab import drive

drive.mount('/content/drive')

import cv2
import os
from PIL import Image
import numpy as np


import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import normalize
from keras.models import sequential
from keras.layers import Conv2D , MaxPooling2D
from keras.layers import Activation , Dropout , Flatten , Dense
from tensorflow.keras.utils import to_categorical

#from keras.utils import normalize

from google.colab import drive
drive.mount('/content/drive')

images_directory = '/content/drive/MyDrive/datasets/'

no_tumor_images = os.listdir(images_directory + 'no/') 
yes_tumor_images = os.listdir(images_directory + 'yes/') 
#no_tumor_images = '/content/drive/MyDrive/datasets/no'
dataset = []
label = []

INPUT_SIZE = 64

print(no_tumor_images)

'''
 print(no_tumor_images)
path = 'no0.jpg'
print(path.split('.')[1])
'''

for i , image_name in enumerate(no_tumor_images):
  if(image_name.split('.')[1]=='jpg'):
    image = cv2.imread(images_directory +'no/' + image_name)
    image = Image.fromarray(image , 'RGB')
    image = image.resize((INPUT_SIZE , INPUT_SIZE)) # we are resizing images
    dataset.append(np.array(image))
    label.append(0)


#print(f'dataset of no :: {dataset} ')
print(len(dataset))

for i , image_name in enumerate(yes_tumor_images):
  if(image_name.split('.')[1]=='jpg'):
    image = cv2.imread(images_directory +'yes/' + image_name)
    image = Image.fromarray(image , 'RGB')
    image = image.resize((INPUT_SIZE , INPUT_SIZE)) # we are resizing images
    dataset.append(np.array(image))
    label.append(1)

#print(dataset)
print(len(dataset))
print(len(label))

dataset = np.array(dataset)
label = np.array(label)

x_train , x_test , y_train , y_test = train_test_split(dataset , label , test_size = 0.2 , train_size=0.8
                                                       , random_state=0)
#this is actually x and y coordinate
print(x_train.shape)
print(y_train.shape)

print(x_test.shape)
print(y_test.shape)

# divide data into 80% and 20%

x_train = normalize(x_train  , axis=1)
x_test = normalize(x_train  , axis=1)

y_train = to_categorical(y_train , num_classes=2)
y_test = to_categorical(y_test , num_classes=2)

from keras.activations import sigmoid
from keras.backend import flatten
from keras.engine.sequential import Sequential
#Model builing 

model  = Sequential() # Initialising CNN 
model.add(Conv2D(32 , (3,3) , input_shape = (INPUT_SIZE , INPUT_SIZE , 3))) # step -1 Convolution 
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size = (2 , 2))) # step -2  Pooling 

#Adding second convolutional layer
model.add(Conv2D(32 , (3,3) , kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size = (2 , 2)))

#Adding third convolutional layer

model.add(Conv2D(64 , (3,3) , kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size = (2 , 2)))


model.add(Flatten()) # step -3 :  Flattening (hidden layer)
model.add(Dense(64)) # 
model.add(Activation('relu')) # step - 4 : full connection
model.add(Dropout(0.5))
model.add(Dense(2))
model.add(Activation('sigmoid')) # step - 5 : output layer

#Binary CrossEntropy = 1 , sigmoid

# Training the CNN (Compiler the cnn)
model.compile(loss='categorical_crossentropy' , optimizer = 'adam' ,  metrics=['accuracy'])



# training the cnn on training dataset
res = model.fit(np.array(x_train), np.array(y_train), verbose=1, epochs=20 ,
         
         shuffle = False)

model.save('BrainTumor10Epocho.h5')

#now testing

import matplotlib.pyplot as plt
print(res.history.keys())
print()
# loss
plt.plot(res.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

print()
print()
print("Training accuracy")
print()
print()
# accuracy

plt.plot(res.history['accuracy'])
plt.title('Model Accuracy')
plt.legend(['Training Accuracy'])
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.show()

import cv2
from keras.models import load_model
from PIL import Image
import numpy as np

model = load_model('BrainTumor10Epocho.h5')

image = cv2.imread('/content/drive/MyDrive/pred/pred5.jpg')
img = Image.fromarray(image)
img = img.resize((64 , 64))
img = np.array(img)

print(img)

#result = model.predict_classes(img)
input_img = np.expand_dims(img , axis=0)
predict_x=model.predict(input_img) 
result=np.argmax(predict_x,axis=1)
print(f'Now detect img is affected or not :: {result} ')
# 0 means MRI has no tumor

